Microservices using Node JS

	Web application
		UI/ Presentation/ Front end
		API/ Business/ Back end
		Data End

https://www.amazon.in/s?k=router&crid=392GNPR8FX16O&sprefix=router%2Caps%2C236&ref=nb_sb_noss_2


Node	>> SDK

java script create and run


data store:
	var, const, let

operations: CRUD, Validation, Processing


output:
print()
System.out.println()
cout
printf

console.log()

input:
scanf
Scanner
input
cin

library: prompt-sync
prompt()



functions:

in built: Window.assign, console.log,........
user defined:
function funName(){
	
}

arrow functions:
const/let/var funName = () => {
	
}


storage logics:
temporary:
var/const/let
list/array

perm:
files
databases





Array: CRUD

redbus
mybookings>> read
booking		> create
cancel		> update

CRUD:
push
pop
map
filter



Java Script Object Notation >> JSON
{
"key": value,
"key": value
}

Student:
{
"name": "Sriram",
"regno": "25D001",
"dept": "AIML",
"contact":{
"email":"sjdbvjd@dfj.com",
"mobile":765456789,
"isTemporaryAddress": false,
}
}


[
{},
{},
{}
]


CRUD:
Hackathon event:
	Participants: list of json's
		name, department, college, rollno, contact
	event name
	event organizer
	winner
	first-runner
	second-runner
	
structurise:
	data.json >> storing data
	process.js>> CRUD operation functions
	host.js	>> Calling process.js functions



CRUD:
Menu driven application:

create new hackathon
add participants into the specific hackathon
announce reward holders in the specific hackathon
remove hackathon


Task:
kart operations: []
{pro-name,pro-price,pro-nature}

1.add items to kart
2.remove specific item from kart
3.update price of the specific item in the kart
4.view specific nature of the items from kart
5.view specific price range between user given min value and user give max value from the kart


URL based calling:
/event/new		>> newHackathon
/event/view		>> viewHackathons
.
.
.

Backend/ Application Server/ Express JS(framework)
controller: url mapping functions
post		>> newHackathon
get		>> viewHackathons
put		>> enroll, announce
delete	>> delete


Project:
	package.json	>> project name, version, dependencies
	package-lock.json	>> node_modules, detailed information
	node_modules:>> physical installed library files

to create project
	npm init  >> create a project
		name, version, ....
	npm init -y>> immediate project with opened folder as name of the project

dependencies:
	express>> server/ api
	nodemon	> developer tools/ auto restart
	mongoose> driver to connect mongodb
	body-parser>> extract and read request body data


client:
 rest client>> vs code extension













Monolithic backend application:
use case:
UrbanClap: Web app
	Provider/ person	>> providerId, providerName, providerUsername, providerPassword, providerContact, providerExperience, serviceId
	Service			>> serviceId, serviceName, serviceDescription, serviceCost

MERN
Node JS>> sdk
frameworks:
	Express JS
database:
	MongoDB
client:
	Rest Client>> VS Code extension
Authentication:
	Json Web Token

install dependencies:
npm i express body-parser mongoose nodemon


